## Дайте определение понятию «интерфейс». Какие модификаторы по умолчанию имеют поля и методы интерфейсов? ##
Ключевое слово interface используется для создания полностью абстрактных классов.
Основное предназначение интерфейса - определять каким образом мы можем использовать класс, который его реализует.
Создатель интерфейса определяет имена методов, списки аргументов и типы возвращаемых значений,
но не реализует их поведение. Все методы неявно объявляются как public.

Начиная с Java 8 в интерфейсах разрешается размещать реализацию методов по умолчанию default и статических static методов.

Интерфейс также может содержать и поля. В этом случае они автоматически являются публичными public, статическими
static и неизменяемыми final.

Методы в интерфейсе являются public abstract.

## Чем абстрактный класс отличается от интерфейса? В каких случаях следует использовать абстрактный класс, а в каких интерфейс? ##
В Java класс может одновременно реализовать несколько интерфейсов, но наследоваться только от одного класса.
Абстрактные классы используются только тогда, когда присутствует тип отношений «is a» (является).
Интерфейсы могут реализоваться классами, которые не связаны друг с другом.
 - Абстрактный класс - средство, позволяющее избежать написания повторяющегося кода, инструмент для частичной реализации
   поведения.
 - Интерфейс - это средство выражения семантики класса, контракт, описывающий возможности. Все методы интерфейса неявно
   объявляются как public abstract или (начиная с Java 8) default - методами с реализацией по-умолчанию,
   а поля - public static final.
Интерфейсы позволяют создавать структуры типов без иерархии.
Наследуясь от абстрактного, класс «растворяет» собственную индивидуальность.
Реализуя интерфейс, он расширяет собственную функциональность.
Абстрактные классы содержат частичную реализацию, которая дополняется или расширяется в подклассах.
При этом все подклассы схожи между собой в части реализации, унаследованной от абстрактного класса, и
отличаются лишь в части собственной реализации абстрактных методов родителя. Поэтому абстрактные классы
применяются в случае построения иерархии однотипных, очень похожих друг на друга классов. В этом случае
наследование от абстрактного класса, реализующего поведение объекта по умолчанию может быть полезно,
так как позволяет избежать написания повторяющегося кода. Во всех остальных случаях лучше использовать
интерфейсы.

## Почему в некоторых интерфейсах вообще не определяют методов? ##
Это так называемые маркерные интерфейсы. Они просто указывают что класс относится к определенному типу.
Примером может послужить интерфейс Clonable, который указывает на то, что класс поддерживает механизм
клонирования.

## Может ли объект получить доступ к члену класса, объявленному как private? Если да, то каким образом? ##
1. Внутри класса доступ к приватной переменной открыт без ограничений;
2. Вложенный класс имеет полный доступ ко всем (в том числе и приватным) членам содержащего его класса;
3. Доступ к приватным переменным извне может быть организован через отличные от приватных методов, которые
предоставлены разработчиком класса. Например: getX() и setX().
4. Через механизм рефлексии (Reflection API):
class Victim {
    private int field = 42;
}
//...
Victim victim = new Victim();
Field field = Victim.class.getDeclaredField("field");
field.setAccessible(true);
int fieldValue = (int) field.get(victim);
//...

