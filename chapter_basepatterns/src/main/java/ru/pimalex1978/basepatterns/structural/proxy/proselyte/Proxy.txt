Шаблон: Прокси (Proxy - Заместитель)
=======================================================================================================
Цель:

Для замещения другого объекта и контроля доступа к нему.
Является суррогатом другого объекта и контролирует доступ к нему.
Известен под именем Surrogate (суррогат).

Заместитель — это структурный паттерн проектирования, который позволяет
подставлять вместо реальных объектов специальные объекты-заменители. Эти
объекты перехватывают вызовы к оригинальному объекту, позволяя сделать
что-то до или после передачи вызова оригиналу.

Паттерн Заместитель предлагает создать новый класс-дублёр, имеющий тот же
интерфейс, что и оригинальный служебный объект. При получении запроса от
клиента объект-заместитель сам бы создавал экземпляр служебного объекта
и переадресовывал бы ему всю реальную работу.

Заместитель — это объект, который выступает прослойкой между клиентом и
реальным сервисным объектом. Заместитель получает вызовы от клиента,
выполняет свою функцию (контроль доступа, кеширование, изменение запроса
и прочее), а затем передаёт вызов сервисному объекту.

=======================================================================================================

Для чего используется:

Для обеспечения контроля досутпа к опредленному объекту.

=======================================================================================================
Пример использования:

- когда есть необходимость ссылаться на объект способом отличным от обычного указателя;
    * удалённое замещение -     локалный представитель вместо объекта в другом
                                адресном пространстве.

    * виртуальное замещение -   создание "тяжёлых объектов" при необходимости.

    * защищённое замещение -    контроль доступа к указанному объекту

    * "умная" ссылка -          замена обычного указателя
                                (подсчёт числа ссылок, установка блокировки ит.д.)

    * Ленивая инициализация (виртуальный прокси). - Когда у вас есть тяжёлый объект, грузящий данные
                                из файловой системы или базы данных.
                                Вместо того, чтобы грузить данные сразу после старта программы, можно
                                сэкономить ресурсы и создать объект тогда, когда он действительно понадобится.
    * Защита доступа (защищающий прокси). - Когда в программе есть разные типы пользователей, и вам
                                хочется защищать объект от неавторизованного доступа. Например, если
                                ваши объекты — это важная часть операционной системы, а пользователи —
                                сторонние программы (хорошие или вредоносные).
                                Прокси может проверять доступ при каждом вызове и передавать выполнение
                                служебному объекту, если доступ разрешён.
    * Локальный запуск сервиса (удалённый прокси). - Когда настоящий сервисный объект находится на
                                удалённом сервере.
                                В этом случае заместитель транслирует запросы клиента в вызовы по сети в
                                протоколе, понятном удалённому сервису.
    * Логирование запросов (логирующий прокси). - Когда требуется хранить историю обращений к сервисному
                                объекту.
                                Заместитель может сохранять историю обращения клиента к сервисному объекту.
    * Кеширование объектов («умная» ссылка). - Когда нужно кешировать результаты запросов клиентов и
                                управлять их жизненным циклом.
                                Заместитель может подсчитывать количество ссылок на сервисный объект,
                                которые были отданы клиенту и остаются активными. Когда все ссылки освобождаются,
                                можно будет освободить и сам сервисный объект (например, закрыть подключение к
                                базе данных).

=======================================================================================================