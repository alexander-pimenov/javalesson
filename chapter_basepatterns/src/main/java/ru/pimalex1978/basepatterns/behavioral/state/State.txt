Шаблон: Состояние (State)
=======================================================================================================
Цель:

Управление поведением объекта в зависимости от состояния.

Состояние — это поведенческий паттерн проектирования, который позволяет объектам менять
поведение в зависимости от своего состояния.
Извне создаётся впечатление, что изменился класс объекта.

Паттерн Состояние предлагает создать отдельные классы для каждого состояния, в котором
может пребывать объект, а затем вынести туда поведения, соответствующие этим состояниям.

=======================================================================================================

Для чего используется:

Позволяет нам управлять поведением объекта в зависимости от внутреннего состояние объекта.

=======================================================================================================
Пример использования:

- поведение объекта зависит от его состояние и изменяется во время выполнения;
- когда встречается большое количество условных операторов, когда выбор ветви
  зависит от состояния объекта.

=======================================================================================================

Контекст хранит ссылку на объект состояния и делегирует ему часть работы, зависящей
от состояний. Контекст работает с этим объектом через общий интерфейс состояний.
Контекст должен иметь метод для присваивания ему нового объекта-состояния.

Вместо того, чтобы хранить код всех состояний, первоначальный объект, называемый
контекстом, будет содержать ссылку на один из объектов-состояний и делегировать
ему работу, зависящую от состояния.

Благодаря тому, что объекты состояний будут иметь общий интерфейс, контекст
сможет делегировать работу состоянию, не привязываясь к его классу. Поведение
контекста можно будет изменить в любой момент, подключив к нему другой
объект-состояние.

=======================================================================================================

Состояние описывает общий интерфейс для всех конкретных состояний.

=======================================================================================================

Конкретные состояния реализуют поведения, связанные с определённым состоянием контекста.
Иногда приходится создавать целые иерархии классов состояний, чтобы обобщить дублирующий код.

Состояние может иметь обратную ссылку на объект контекста. Через неё не только удобно
получать из контекста нужную информацию, но и осуществлять смену его состояния.

=======================================================================================================

И контекст, и объекты конкретных состояний могут решать, когда и какое следующее состояние
будет выбрано. Чтобы переключить состояние, нужно подать другой объект-состояние в контекст.

=======================================================================================================

Очень важным нюансом, отличающим этот паттерн от Стратегии, является то, что и
контекст, и сами конкретные состояния могут знать друг о друге и инициировать
переходы от одного состояния к другому.

=======================================================================================================

Состояние можно рассматривать как надстройку над Стратегией. Оба паттерна используют композицию,
чтобы менять поведение основного объекта, делегируя работу вложенным объектам-помощникам.
Однако в Стратегии эти объекты не знают друг о друге и никак не связаны. В Состоянии сами
конкретные состояния могут переключать контекст.

=======================================================================================================