Реализация простого HTTP-сервера на Java для обработки методов POST: HTTP-сервер для загрузки файлов
2 ноября 2008 г., воскресенье
https://web.archive.org/web/20130525085722/http://www.prasannatech.net/2008/11/http-web-server-java-post-file-upload.html

Примечание.
Обновленную версию этого сообщения можно найти на
https://web.archive.org/web/20130525085722/http://www.prasannatech.net/2009/03/java-http-post-file-upload-server.html,
который будет обрабатывать любые виды загрузки файлов (текстовые и двоичные файлы) большого размера.

В последнем разделе о java мы увидели, как реализовать простой / легкий HTTP / веб-сервер для обработки методов HTTP GET .
В этом разделе мы увидим, как реализовать простой HTTP / веб-сервер на java для обработки методов POST на примере
сервера загрузки файлов, использующего метод POST через данные клиентской формы.

Преимущество реализации нашего собственного HTTP-сервера для обработки методов GET / POST заключается в том,
что мы можем использовать их для некоторых простых / легких приложений, которые не требуют развертывания
веб-сервера Apache или контейнера сервлетов для обработки клиентских запросов HTTP, а также эти простые
HTTP-серверы могут использоваться в качестве служебных классов, которые могут быть интегрированы в небольшие
приложения.

Приведенный ниже HTTP-сервер POST выполняет следующие функции.

1. Отображает форму загрузки файла при доступе к домашней странице (http://127.0.0.1:5000),
отображает ошибку для других недопустимых запросов GET.

2. Загружает текстовый файл через форму загрузки файла и отправляет его. Конечным результатом
является то, что файл будет загружен в каталог, в котором работает класс HTTPPOSTServer.
Примечание. Этот код будет работать только для текстовых файлов.

3. Обрабатывает текстовые файлы размером до 2 МБ.

Я тестировал код в IE 7, Firefox и Chrome (кстати, мне нужно было сильно изменить код, чтобы
сделать его совместимым с IE).
Извлеченный урок: всегда сначала проверяйте свой код в IE, чтобы избежать разочарований,
поскольку это может доставить вам некоторые трудности, наоборот (хотя ничего против IE).

Работа:

Работа с кодом довольно проста, HTTP-сервер проверяет наличие метода GET или POST, и если это
метод GET (строка 53 ) для домашней страницы, он отображает форму загрузки файла, через которую
пользователь может загрузить файла, в случае любых других недопустимых запросов GET,
кроме домашней страницы, отображается сообщение об ошибке (строка 65 ).

Строка 70 обрабатывает запрос POST и проверяет тип содержимого (строка 74 ), границу POST
(строка 75 ), длину содержимого (строка 81 ) и имя файла (строка 98 ), после того как эти
значения проанализированы, файл успешно загружен (строки 108 - 126 ) при длине файла 88).

Я закомментировал некоторые утверждения, которые должны быть верными при разборе строки
запроса POST, но тогда код будет работать только тогда, когда утверждения были включены
(с использованием java -ea HTTPPOSTServer), что в целом не является хорошей практикой,
поэтому, если вы хотите узнайте больше о том, как запросы HTTP POST, добавьте свои
собственные утверждения при разборе запроса POST, если вы ожидаете в строке запроса
что-то, что должно соответствовать определенной строке.
