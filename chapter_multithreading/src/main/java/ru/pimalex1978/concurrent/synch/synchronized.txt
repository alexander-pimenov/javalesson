Синхронизация потоков, synchronized.
Synchronized - синхронизация.
  Потоки общаются друг с другом путем доступа к одним и тем же переменным.
  Это может вызывать проблему memory consistency (согласованность памяти) и
  visibility ( видимость), когда изменения сделанные одним потоком не
  видны другим потокам.

 В процессе функционирования потоки часто используют общие ресурсы приложения,
 определенные вне потока. Если несколько потоков начнут одновременно вносить
 изменения в общий ресурс, то результаты выполнения программы могут быть
 непредсказуемыми.

 Можно использовать synchronized в своих классах определяя синхронизированные
 методы или блоки. Но нельзя использовать synchronized в переменных или
 атрибутах в определении класса.

Если используется synchronized в статическом методе, то используется
лок класса, а если метод не статический, то лок объекта this.

Чтобы программа работала правильно, нужно ограничить доступ
  к методу. Используем synchronized, чтобы только один поток
  мог работать с методом, а другой ждал.
  Т.е. сперва один поток будет использовать метод, а потом
  другой продолжит это действие. Но не одновременно.
  intrinsic lock - внутренняя блокировка этому помагает.

Пример кода с synchronized:
       private static synchronized void calcNext() {
           int next = previous + current;
           previous = current;
           current = next;
           System.out.println(current);
       }

// Это идентичные записи synchronized в методе.
//    private static void calcNext() {
//        synchronized (FibonacciConcurrent.class) {
//            int next = previous + current;
//            previous = current;
//            current = next;
//            System.out.println(current);
//        }
//    }
