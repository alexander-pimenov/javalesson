package ru.pimalex1978.concurrent.locks.semaphore;

import java.util.concurrent.Semaphore;

/**
 * Синхронизаторы – вспомогательные утилиты для синхронизации потоков, которые
 * дают возможность разработчику регулировать и/или ограничивать работу потоков
 * и предоставляют более высокий уровень абстракции, чем основные примитивы языка
 * (мониторы).
 * <p>
 * Семафоры отлично подходят для решения задач, где надо ограничивать доступ.
 * Например, классическая задача про обедающих философов.
 * Ее суть: есть несколько философов, допустим, пять, но одновременно за
 * столом могут сидеть не более двух. И надо, чтобы все философы пообедали,
 * но при этом не возникло взаимоблокировки философами друг друга в борьбе
 * за тарелку и вилку.
 * Источник:
 * https://metanit.com/java/tutorial/8.6.php
 */
public class SemaphoreDemo {
    public static void main(String[] args) {
        Semaphore sem = new Semaphore(2);
        for (int i = 1; i < 6; i++) {
            new Philosopher(sem, i).start();
        }
    }
}

// класс философа
class Philosopher extends Thread {
    private Semaphore sem; // семафор. ограничивающий число философов
    // кол-во приемов пищи
    private int num = 0;
    // условный номер философа
    private int id;

    // в качестве параметров конструктора передаем идентификатор философа и семафор
    Philosopher(Semaphore sem, int id) {
        this.sem = sem;
        this.id = id;
    }

    public void run() {
        try {
            while (num < 3)// пока количество приемов пищи не достигнет 3
            {
                //Запрашиваем у семафора разрешение на выполнение
                //acquire() запрашивает доступ к следующему за вызовом этого метода блоку кода,
                //если доступ не разрешен, поток вызвавший этот метод блокируется до тех пор,
                //пока семафор не разрешит доступ
                sem.acquire();
                System.out.println("Философ " + id + " садится за стол");
                // философ ест
                sleep(500);
                num++;

                System.out.println("Философ " + id + " выходит из-за стола");
                sem.release();

                // философ гуляет
                sleep(500);
            }
        } catch (InterruptedException e) {
            System.out.println("у философа " + id + " проблемы со здоровьем");
        }
    }
}
