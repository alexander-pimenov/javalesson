Объяснения нашего конфигурационного лог-файла.
https://javarush.ru/groups/posts/2293-zachem-nuzhno-logirovanie
================================================================

ОБЯЗАТЕЛЬНО ФАЙЛ НАЗЫВАЕМ log4j2.xml !!! Не log4j.xml, а log4j2.xml !!!
иначе не работает ((((( Т.к. у Log4j версия 1 и 2 не совместимы.
================================================================
#################################################################
Код конфигурационного лог-файла:
#################################################################
<?xml version="1.0" encoding="UTF-8"?>
<!--Чтобы изменить поведение логгера по умолчанию, нам нужно сконфигурировать свой файловый аппендер-->
<Configuration status="INFO">
    <Appenders>
        <File name="MyFileAppender" fileName="C:\test\testlog.txt" immediateFlush="false" append="true">
            <PatternLayout pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </File>
    </Appenders>
    <category name="ru.pimalex1978.example1">
        <!--all, trace, debug, info, warn, error, fatal - уровни логгирования !!!-->
<!--        <priority value="info"/>-->
<!--        <appender-ref ref="MyFileAppender"/>-->
    </category>

    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="MyFileAppender"/>
        </Root>
    </Loggers>
</Configuration>
=================================================================

<Configuration status="INFO">
Это так называемый status-logger. Он НЕ имеет отношения к нашему логгеру и используется во внутренних процессах log4j.
Можно установить status=”TRACE” вместо status=”INFO”, и в КОНСОЛЬ будет выводиться вся информация о внутренней
работе log4j (status-logger выводит данные именно  в консоль, даже если наш аппендер для программы будет файловым) !!!
Так и есть, проверял. В файл записываются только наши 3 сообщения, а в консоль ВЕСЬ стектрейс!!!
=================================================================

Как же нам сделать так, чтобы ход работы программы куда-то записывался?

Для этого нам нужны две вещи — логгер и аппендер.

Начнем с первого.
Логгер — это объект, который полностью управляет ведением записей.

Уровни логгирования:
all, trace, debug, info, warn, error, fatal, off
error - значит, в этом месте программы произошла ошибка
info - значит это просто текущая информация о нормальной работе программы
warn - выводятся все предупреждения

Рассмотрим уровни на примере log4j.
Остальные решения, кроме JUL, используют такие же уровни.
Вот они в порядке уменьшения:
    OFF:    никакие логи не записываются, все будут проигнорированы;
    FATAL:  ошибка, после которой приложение уже не сможет работать и будет остановлено, например, JVM out of memory
            error;
    ERROR:  уровень ошибок, когда есть проблемы, которые нужно решить. Ошибка не останавливает работу приложения в
            целом. Остальные запросы могут работать корректно;
    WARN:   обозначаются логи, которые содержат предостережение. Произошло неожиданное действие, несмотря на это
            система устояла и выполнила запрос;
    INFO:   лог, который записывает важные действия в приложении. Это не ошибки, это не предостережение, это ожидаемые
            действия системы;
    DEBUG:  логи, необходимые для отладки приложения. Для уверенности в том, что система делает именно то, что от нее
            ожидают, или описания действия системы: “method1 начал работу”;
    TRACE:  менее приоритетные логи для отладки, с наименьшим уровнем логирования;
    ALL:    уровень, при котором будут записаны все логи из системы.


Аппендер — это место, куда приходят твои данные.
Можно сказать, противоположность источнику данных — «точка B».

Чтобы изменить поведение логгера по умолчанию, нам нужно сконфигурировать свой файловый аппендер.

<Appenders>
   <File name="MyFileAppender" fileName="C:\Users\Евгений\Desktop\testlog.txt" append="true">
       <PatternLayout pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
   </File>
</Appenders>
Тут мы создаем наш аппендер.
<Appenders>...</Appenders>

Тег <File> указывает что он будет файловым.

name="MyFileAppender" — имя нашего аппендера.

fileName="C:\test\testlog.txt" — путь к лог-файлу, куда будут записываться все данные.

append="true" — нужно ли дозаписывать ли данные в конец файла. В нашем случае так и будет.
Если установить значение false, при каждом новом запуске программы старое содержимое лога будет удаляться.

<PatternLayout pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/> — это настройки
форматирования. Здесь мы с помощью регулярных выражений можем настраивать формат текста в нашем логе.
=================================================================

<Loggers>
       <Root level="INFO">
           <AppenderRef ref="MyFileAppender"/>
       </Root>
</Loggers>
Здесь мы указываем уровень логгирования (root level).
<Loggers>...</Loggers>

У нас установлен уровень INFO <Root level="INFO">:
то есть, все сообщения уровней выше INFO (trace, debug, info, warn, error)
в лог не попадут.


У нас в программе будет 3 сообщения: одно INFO, одно WARN и одно ERROR:
которые обрабатываются логгером:
LOGGER.info("Начало работы программы!!!");
LOGGER.warn("Внимание! программа пытается разделить одно число на другое");
LOGGER.error("Ошибка! Произошло деление на ноль!", x);

С текущей конфигурацией все 3 сообщения будут записаны в лог.
*****
2020-01-27 20:29:30.240 [main] INFO  ru.pimalex1978.example1.MyTestClass - Начало работы программы!!!
2020-01-27 20:29:30.246 [main] WARN  ru.pimalex1978.example1.MyTestClass - Внимание! программа пытается разделить одно число на другое
2020-01-27 20:29:30.247 [main] ERROR ru.pimalex1978.example1.MyTestClass - Ошибка! Произошло деление на ноль!
java.lang.ArithmeticException: / by zero
	at ru.pimalex1978.example1.MyTestClass.main(MyTestClass.java:20) [classes/:?]
*****

Если ты поменяешь значение root level на ERROR, в лог попадет только последнее сообщение из LOGGER.error().
Имеем такое сообщение:
*****
2020-01-27 20:25:16.799 [main] ERROR ru.pimalex1978.example1.MyTestClass - Ошибка! Произошло деление на ноль!
java.lang.ArithmeticException: / by zero
	at ru.pimalex1978.example1.MyTestClass.main(MyTestClass.java:20) [classes/:?]
*****

Если ты поменяешь значение root level на WARN, в лог попадет и LOGGER.warn() и последнее сообщение из LOGGER.error().
*****
2020-01-27 20:27:14.221 [main] WARN  ru.pimalex1978.example1.MyTestClass - Внимание! программа пытается разделить одно число на другое
2020-01-27 20:27:14.233 [main] ERROR ru.pimalex1978.example1.MyTestClass - Ошибка! Произошло деление на ноль!
java.lang.ArithmeticException: / by zero
	at ru.pimalex1978.example1.MyTestClass.main(MyTestClass.java:20) [classes/:?]
*****

Кроме того, сюда же помещается ссылка на аппендер. Чтобы создать такую ссылку, нужно внутри тега <Root>
создать тег <ApprenderRef> и добавить ему параметр ref=”имя твоего аппендера”.

Имя аппендера мы создали вот тут:

<File name="MyFileAppender"

В теге <category>...</category> указан пакет, в котором нужно искать класс файл где прописан логгер.
У нас это <category name="ru.pimalex1978.example1">

#################################################################
Теперь сам код конфигурационного лог-файла:
#################################################################
<?xml version="1.0" encoding="UTF-8"?>
<!--Чтобы изменить поведение логгера по умолчанию, нам нужно сконфигурировать свой файловый аппендер-->
<Configuration status="INFO">
    <Appenders>
        <File name="MyFileAppender" fileName="C:\test\testlog.txt" immediateFlush="false" append="true">
            <PatternLayout pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </File>
    </Appenders>
    <category name="ru.pimalex1978.example1">
        <!--all, trace, debug, info, warn, error, fatal - уровни логгирования !!!-->
<!--        <priority value="info"/>-->
<!--        <appender-ref ref="MyFileAppender"/>-->
    </category>

    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="MyFileAppender"/>
        </Root>
    </Loggers>
</Configuration>
#################################################################

Никогда не следует пытаться использовать адаптер SLF4J (log4j-to-slf4j-2.x.jar) вместе
с мостом SLF4J (log4j-slf4j-impl-2.x.jar), так как это приведет к бесконечной маршрутизации
событий между SLF4J и Log4j 2.

Источники библиотеки для slf4j отсюда:
http://www.slf4j.org/download.html
и библиотеки log4j отсюда:
https://logging.apache.org/log4j/2.x/download.html

Далее архив нужно распаковать,и добавить нужные нам jar-файлы в classpath через Intellij IDEA.
Пункты меню: File - Project Structure - Libraries

#################################################################
Пример шаблона, от которого я обычно отталкиваюсь в работе:
%d{ISO8601} [%-5p][%-16.16t][%32.32c] - %m%n

Расшифровка:

1. Дата в формате ISO8601. Когда логи большие, только времени будет недостаточно, нужна и дата.
    У формата DATE используется символьное имя месяца, потому ширина получается переменной.
2. Приоритет – минимально 5 символов (а больше и не бывает в Log4J), выравнивание влево.
3. Имя потока – 16 символов, выравнивание влево.
4. Категория – 32 символа, выравнивание вправо. В принципе, можно обрезать начальные части имени,
    но тогда надо быть уверенным, что в конкретный аппендер будут идти логи только от собственного кода,
    иначе есть риск не увидеть разницы между ru.skipy.SQL и org.hibernate.SQL.
5. Сообщение, после которого идет символ окончания строки.

#################################################################

Пример конфигурирования log4j2.xml:

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration debug="false" >

<!--ВЫВОД В КОНСОЛЬ-->
    <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
        <param name="Encoding" value="UTF-8"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c %x - %m%n" />
        </layout>
    </appender>

<!--ВЫВОД В ФАЙЛ-->
    <appender name="file" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="D:\\bulk.log"/>
        <param name="Append" value="false"/>
        <param name="Encoding" value="UTF-8"/>
        <layout class="org.apache.log4j.EnhancedPatternLayout">
            <param name="ConversionPattern" value="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c %x - %m%n"/>
        </layout>
    </appender>

    <root>
        <priority value="INFO"/>
        <appender-ref ref="file" />
        <appender-ref ref="ConsoleAppender" />

    </root>

</log4j:configuration>

#################################################################

Итак, простейшие конфигурации. В XML:

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration debug="false" xmlns:log4j="http://jakarta.apache.org/log4j/">

    <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
        <param name="Encoding" value="Cp866"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d{ISO8601} [%-5p][%-16.16t][%32.32c] - %m%n" />
        </layout>
    </appender>

    <root>
        <priority value="ERROR"/>
        <appender-ref ref="ConsoleAppender" />
    </root>

</log4j:configuration>

И в виде свойств:

log4j.debug = false

log4j.rootLogger = ERROR, ConsoleAppender

log4j.appender.ConsoleAppender = org.apache.log4j.ConsoleAppender
log4j.appender.ConsoleAppender.encoding = Cp866
log4j.appender.ConsoleAppender.layout = org.apache.log4j.PatternLayout
log4j.appender.ConsoleAppender.layout.ConversionPattern = %d{ISO8601} [%-5p][%-16.16t][%32.32c] - %m%n

Что тут сделано:

Создан аппендер с именем ConsoleAppender и кодировкой Cp866
У созданного аппендера установлен компоновщик PatternLayout с шаблоном %d{ISO8601} [%-5p][%-16.16t][%32.32c] - %m%n
Сконфигурирован корневой логгер, использующий созданный аппендер и имеющий уровень ERROR.

