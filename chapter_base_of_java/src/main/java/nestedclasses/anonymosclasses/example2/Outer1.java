package nestedclasses.anonymosclasses.example2;

/**
 * Анонимные внутренние классы объявляются без указания имени класса.
 * Они могут быть созданы двумя путями:
 * <p>
 * 1. Как наследник определённого класса
 * (класс Demo является суперклассом, от которого наследуется анонимный класс,
 * и оба они имеют метод show().
 * В анонимном классе метод show() будет переопределён.)
 * <p>
 * 2. Как реализация определённого интерфейса
 * (мы создаём объект анонимного внутреннего класса, но этот анонимный внутренний
 * класс является реализацией интерфейса Hello.)
 * <p>
 * Любой анонимный внутренний класс может за один раз реализовать только один интерфейс.
 * Так же, за один раз можно либо расширить класс,
 * либо реализовать интерфейс, но не одновременно.
 */
public class Outer1 {

    //Анонимный класс наследуется от класса Demo
    static Demo demo = new Demo() {

        public void show() {
            super.show(); //вызывается метод из суперкласса
            System.out.println("Метод внутреннего анонимного класса, как наследник");
        }
    };

    //Анонимный класс, который реализует интерфейс Hello
    static Hello h = new Hello() {
        public void ishow() {
            System.out.println("Метод внутренненнего анонимного класса от интерфейса");
        }
    };

    public static void main(String[] args) {
        demo.show();
        h.ishow();
    }
}

class Demo {
    public void show() {
        System.out.println("Метод суперкласса");
    }
}

interface Hello {
    void ishow();
}