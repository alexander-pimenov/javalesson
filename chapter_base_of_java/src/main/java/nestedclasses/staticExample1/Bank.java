package nestedclasses.staticExample1;

import java.util.HashMap;

/*рассмотрим работу примитивного банка
 * используем статические вложенные классы
 * Польза данных классов заключается в основном в логической группировке сущностей,
 * в улучшении инкапсуляции, а также в экономии class-space.
 * Static nested классы имеют доступ к любым статическим методам внешнего класса, в том числе и к приватным.*/

public class Bank {
    /*для того чтобы связывать человека с его счетом, хранить информацию о человеке
     * создадим класс, обозначающий счет. Определим этот класс внутри класса Bank*/
    /*этот статический вложенный класс поможет нам упростить программу.Нам не нужно делать это где-то извне*/
    private static class Account {
        /*чтобы хранить инфо о пользователе, заводим ПОЛЯ*/
        private String id;
        private String name;
        private int money;//колич.денег на его счету
    }

    /*т.к. Банк нельзя создавать на ровном месте, мы конструктор Bank объявим private.
     * И это будет говорить, что нельзя будет создать Bank в любом месте программы
     * через new, кроме самого этого класса*/
    private Bank() {

    }

    /*не смотря на private Bank изнутри статического вложенного класса Banker
     * мы  вполне можем вызвать этот конструктор  private Bank() не нарушив видимости*/
    static class Banker {
        //главная функция банкира Banker будет создание банка Bank
        public Bank createBank() {
            return new Bank();
        }
    }

    /*чтобы иметь возможность по идентификатору id доставать тот или иной счет
     * мы заводим такое ПОЛЕ (список счетов):*/
    //это HashMap ключем у которой будет строчная переменная id, а значением будет счет Account
    HashMap<String, Account> accounts = new HashMap<String, Account>();

    /*заводим методы нужные для банка:*/
    //метод открывающий счет Account, с входными данными id & name человека
    public void openAccount(String id, String name) {
        //при открытии счета: создаем счет Account
        Account account = new Account();
        //устанавливаем ему идентификатор id
        account.id = id;
        //устанавливаем ему имя
        account.name = name;
        //кладем этот счет в наш список счетов
        accounts.put(id, account);
    }

    //метод положить деньги: с входными данными id & amount колич. денег
    public void putMoney(String id, int amount) {
        //чтобы положить деньги на счет, мы из списка счетов достаем счет Account соответствующий данному id
        Account account = accounts.get(id);
        //делаем проверку на наличие счета: если нет такого счета, то ничего не делаем
        if (account == null) {
            System.out.println("Нет такого аккаунта!");
            return;
        }
        //если счет в списке есть, то колич.денег увеличиваем на amount
        account.money += amount;
    }

    //метод снять деньги со счета: с входными данными id & amount
    public void getMoney(String id, int amount) {
        //чтобы снять деньги со счета, мы из списка счетов достаем счет Account соответствующий данному id
        Account account = accounts.get(id);
        //делаем проверку на наличие счета: если нет такого счета, то ничего не делаем return
        if (account == null) {
            System.out.println("Нет такого аккаунта!");
            return;
        }
        //если счет в списке есть, то колич.денег уменьшаем на amount
        account.money -= amount;
    }
}
