package nestedclasses.staticExample2;

/*
 * Внутренние вложенные классы нужны, чтобы обслуживать внешний
 * обрамляющий класс.
 * Здесь видим пример КОМПОЗИЦИИ, это когда внутренний объект
 * является частью внешнего объекта и не может существовать
 * отдельно, без основного объекта (как нога у кошки).
 *
 * У статических классов есть некоторая особенность, они могут быть
 * венессены за пределы обрамляющего класса.Рекомендуется делать
 * вложенные классы статическими. Работать с ними просто.
 *
 * Создать экземпляр вложенного статического класса можно
 * так: Test.StaticInner staticInner = new StaticInner();
 * т.е. создаем его без создания объекта обрамляющего класса.
 *
 * Просто вложенный класс таким образом создать не получиться,
 * потому чт нужен объект обрамляющего класса:
 *
 * Из статического метода можно обращаться к статическим переменным
 * без проблем.
 * Test.i2 = 10;
 *
 * При обращении к классу Test создаются все его статические переменные и
 * статические классы. Поэтому к ним имеем безпроблемный доступ.
 * Test.i2 = 10;
 *
 * К не статическому контексту можно обратиться только создав объект
 * обрамляющего класса.
 * Test test = new Test();
 * test.i1 = 20;
 *
 * Из статических вложенных классов можно обращаться только к статическим
 * переменным.
 *
 * Создать объект этого вложенного класса можно так:
 * Test.Inner inner = new Test().new Inner();
 * И даже если Inner() будет private.
 * Т.к. доступ из внешнего класса можно сделать к любому своему
 * вложенному классу.
 *
 */
public class Test {
    int i1;
    static int i2;

    public class Inner {
//        static int a; // так нельзя

        void test() {
            i1 = 10;
            i2 = 42;
        }
    }

    public static class StaticInner {
        static int a;

        void test() {
//            i1 = 10; // нет доступа
            i2 = 42;
        }
    }

    public static void main(String[] args) {
        Test test = new Test();
        Test.StaticInner staticInner = new StaticInner();
//        Test.StaticInner staticInner = new Test.StaticInner(); //или так
        Test.i2 = 10;
        test.i1 = 20;

        Test.Inner inner = new Test().new Inner();
//        Test.Inner inner = test.new Inner(); // или так

    }
}
