Реализация простого HTTP-сервера на Java для обработки методов GET
Суббота, 4 октября 2008 г.
https://web.archive.org/web/20130525092305/http://www.prasannatech.net/2008/10/simple-http-server-java.html
http://www.prasannatech.net/2008/10/simple-http-server-java.html

Реализация простого HTTP-сервера в java с использованием сокетов - полезное приложение,
которым, как я подумал, стоит поделиться здесь.
Когда я внедрял свою собственную поисковую систему ,
мне всегда требовался легкий HTTP-сервер сокета, который я могу связать с моим пакетом,
и каждый раз, когда вам нужен HTTP / веб-сервер, вам не нужно переходить на веб-сервер
Apache, что было бы излишним. для простых приложений, обслуживающих только статический
контент, скажем, поискового приложения Google на рабочем столе, где вам просто нужен
пользовательский интерфейс HTML, обслуживаемый через простой HTTP-сервер.

На этом HTTP-сервере мы увидим

1. Как обрабатывать HTTP-запросы
2. Как обрабатывать методы HTTP GET
3. Как создать несколько потоков управления для обработки каждого HTTP-клиента

Приведенный ниже HTTP-сервер печатает клиентский HTTP-запрос на домашней странице,
обслуживает любые допустимые файлы, запрошенные с помощью метода GET, в противном
случае печатает сообщение об ошибке HTTP 404 page not found, позволяет взглянуть
на код и простое объяснение.


Пояснение:

Код довольно прост: в основном (строки 133–143) мы принимаем новые соединения и вызываем
поток на вновь созданном экземпляре HTTPServer, который будет обрабатывать запрос.

В строке 53 , в то время как ( inFromClient.ready () ) зацикливается до тех пор , пока
не будут получены все параметры HTTP-запроса, это означает чтение всех строк входящего
HTTP-запроса, функция готовности BufferedReader сообщает, готов ли поток к чтению или нет. ,
поэтому мы обрабатываем HTTP-запрос от клиента до тех пор, пока поток не будет готов,
тем самым гарантируя, что мы получим полный запрос, доступный для обработки, включая
все заголовки запроса.

В строке 67 мы используем fileName = URLDecoder.decode (fileName) для декодирования
URL-адреса метода GET запроса, большинство ошибок HTTP-кодирования происходит из-за того,
что входящий HTTP-запрос не является URLDecoded, в результате мы не получим правильные
параметры для обработки, поэтому необходимо URLDecode input строка запроса.

В остальном все просто: мы печатаем заголовки HTTP-запроса GET на домашней странице,
иначе запрошенный файл будет обслужен, иначе будет выведена ошибка 404 Page not found,
если входной запрос GET не является допустимым файлом в файловой системе.

Вывод:

1. http://127.0.0.1:5000 должна распечатать домашнюю страницу с параметрами HTTP-запроса
2. http://127.0.0.1:5000/myHTTPServer.java загрузит исходный файл java,
    если вы запустите java class в том же месте или попробуйте любой другой файл
    в файловой системе, указав абсолютный путь, который будет загружен.
3. http://127.0.0.1:5000/invalidfile приведет к ошибке HTTP 404 file not found.

Мы увидим, как обрабатывать методы HTTP POST в будущем на примере HTTP-сервера для загрузки файлов.
