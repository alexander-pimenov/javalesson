В данном пакете представлены примеры работы с перечислениями.
===========================================================================
Перечисления представляют собой список именованных констант.

Перечисления создаются с помощью ключевого слова - enum.

Не смотря на то, что перечисления определяют тип класса, получать экзеспляры
класса типа enum с помощью new нельзя.

Перечисления автоматически включают в себя два переопределенных метода:
values() и valuesOf():
public static тип_перечисления [] values()
public static тип_перечисления valuesOf(String строка)

values() - возвращает массив, содержащий список констант перечислимого типа.
valuesOf() - возвращает константу перечислимого типа, значение которой соответствует
символьной строке, переданной в качестве аргумента "строка".
ordinal() - возвращает все порядковые значения enum.

===========================================================================
О перчислении хорошо написано в Шилдт Г. "Java 8 Полное руководство. 2015" стр. 317
===========================================================================

Правила использования Enum
================================================================================

1. Все перечисления в Java неявно расширяют java.lang.Enum класс, который
    расширяет класс Object и реализует Serializable и Comparable интерфейсы,
    так что Enum не может наследовать классы.
2. Нельзя заканчивать имя пакета словом enum, например, com.javadevblog.enum —
    недопустимое имя пакета.
3. Перечисления в Java могут реализовывать интерфейсы. (На примере выше есть
    Enum, который реализовывает интерфейс Closeable.)
4. Enum конструкторы в Java всегда private.
5. Нельзя создать экземпляр перечисления, используя оператор new.
6. Мы можем создавать абстрактные методы в Enum, поэтому все поля Enum должны
    реализовывать абстрактный метод. (В приведенном выше примере метод getDetail()
    является абстрактным и все поля в Enum реализовали его.
7. Мы можем определить метод в Enum, а поля могут переопределять их.
8. Все поля в Enum имеют пространство имен, поэтому мы можем использовать поле
    только с именем класса: ThreadStates.START
9. Перечисления могут быть использованы в switch. Пример использования увидим
    чуть позже в этом уроке.
10. Мы можем изменять существующее перечисление не нарушая существующей
    функциональности. Например, мы можем добавить новое поле NEW в ThreadStatesClass
    и это никак не повлияет на существующую функциональность.
11. Хорошим тоном считается написание большими буквами и нижнее подчеркивание
    для пробелов. Например, EAST, WEST, EAST_DIRECTION и т.д.
12. Enum константы неявно static и final
13. Enum константы являются final, но ее можно изменять.
    Например, мы можем использовать метод setPriority(), чтобы изменить приоритет
    констант в Enum. (Мы увидим его на практике в примере ниже).
14. Мы может безопасно сравнивать константы с помощью «==» и метода equals().
    Они оба будут давать тот же результат.